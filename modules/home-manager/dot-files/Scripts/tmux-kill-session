#!/usr/bin/env bash

LOG_FILE="$HOME/Library/Logs/tmux-scripts/tmux-kill-session.log"
mkdir -p "$(dirname "$LOG_FILE")"

log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> "$LOG_FILE"
}

assume_yes=0
session=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --yes) assume_yes=1; shift;;
    --) shift; break;;
    *) session="${session:-$1}"; shift;;
  esac
done

# If no session provided, get current session
if [[ -z "$session" ]]; then
  session=$(tmux display-message -p '#S' 2>/dev/null || echo "")
fi
[[ -n "$session" ]] || { echo "No tmux session specified or active."; exit 1; }

log "Starting kill session for: $session (assume_yes=$assume_yes)"

# Ask for confirmation unless --yes was set
if (( ! assume_yes )); then
  read -r -p "Confirm kill tmux session '$session'? [y/N] " resp
  if [[ ! "$resp" =~ ^([yY]|[yY][eE][sS])$ ]]; then
    echo "Aborted session termination."
    log "User aborted session termination for: $session"
    exit 0   # return 0 to avoid tmux reporting “returned 1”
  fi
fi

# Self-protect if running inside the target session
current_session="$(tmux display-message -p '#S' 2>/dev/null || true)"
in_target_session=0
[[ -n "$current_session" && "$current_session" == "$session" ]] && in_target_session=1
self_tty="$(tty 2>/dev/null || true)"
self_tty_name="${self_tty#/dev/}"
self_pgid="$(ps -o pgid= -p $$ 2>/dev/null | tr -d ' ')"
trap '' HUP

# 1) Capture pane TTYs before touching the session
ttys=()
while IFS= read -r tty; do [[ -n "$tty" ]] && ttys+=("$tty"); done \
  < <(tmux list-panes -t "$session:" -s -F "#{pane_tty}" 2>/dev/null | sort -u || true)

if (( ${#ttys[@]} == 0 )); then
  log "No panes/TTYs found for session '$session'; skipping process signaling"
else
  log "Found ${#ttys[@]} TTYs for session '$session': ${ttys[*]}"

  # Exclude tmux client TTYs (outer terminal emulators)
  client_names=()
  while IFS= read -r ct; do [[ -n "$ct" ]] && client_names+=("${ct#/dev/}"); done \
    < <(tmux list-clients -t "$session" -F "#{client_tty}" 2>/dev/null | sort -u || true)

  # 2) TERM: by pane TTY and by foreground PGID (TPGID)
  for tty in "${ttys[@]}"; do
    name="${tty#/dev/}"

    # Skip our own TTY if we're killing the session we're in
    if (( in_target_session )) && [[ "$name" == "$self_tty_name" ]]; then
      log "Skipping own TTY: $name"
      continue
    fi

    # Skip known client TTYs
    skip=0
    for ct in "${client_names[@]}"; do [[ "$name" == "$ct" ]] && { skip=1; break; }; done
    (( skip )) && { log "Skipping client TTY: $name"; continue; }

    pkill -TERM -t "$name" 2>/dev/null || true
    log "TERM via pkill -t $name"

    tpgid="$(ps -o tpgid= -t "$tty" 2>/dev/null | awk 'NR==1{gsub(/[[:space:]]/,"");print}')"
    if [[ -n "$tpgid" && "$tpgid" =~ ^[0-9]+$ && "$tpgid" -gt 1 ]]; then
      if (( in_target_session )) && [[ "$tpgid" == "$self_pgid" ]]; then
        log "Skipping own PGID: $tpgid"
      else
        kill -TERM -- -"${tpgid}" 2>/dev/null || true
        log "TERM to PGID $tpgid"
      fi
    fi
  done

  # 3) Unconditional delayed KILL sweep (detached); reuses captured targets
  (
    sleep 1
    for tty in "${ttys[@]}"; do
      name="${tty#/dev/}"
      [[ $in_target_session -eq 1 && "$name" == "$self_tty_name" ]] && continue
      skip=0
      for ct in "${client_names[@]}"; do [[ "$name" == "$ct" ]] && { skip=1; break; }; done
      (( skip )) && continue

      pkill -KILL -t "$name" 2>/dev/null || true
      log "KILL via pkill -t $name"

      tpgid="$(ps -o tpgid= -t "$tty" 2>/dev/null | awk 'NR==1{gsub(/[[:space:]]/,"");print}')"
      if [[ -n "$tpgid" && "$tpgid" =~ ^[0-9]+$ && "$tpgid" -gt 1 ]]; then
        [[ $in_target_session -eq 1 && "$tpgid" == "$self_pgid" ]] || {
          kill -KILL -- -"${tpgid}" 2>/dev/null || true
          log "KILL to PGID $tpgid"
        }
      fi
    done
    log "KILL sweep complete"
  ) >/dev/null 2>&1 & disown || true
fi
# --- end teardown ---

# Kill the session immediately
if tmux kill-session -t "$session" 2>&1 | tee -a "$LOG_FILE"; then
  log "Successfully killed session: $session"
else
  log "Failed to kill session: $session"
fi
